echo "INFO, test carrier_lcd"
rm Q_CARRIER_LCD.txt

item="$1"
usage()
{
echo "Enter  CARRIER_LCD_ON/CARRIER_LCD_OFF"
}

i2c_add=68
video_status="eDP1 connected 1920x1200"
if [ "$item" == "CARRIER_LCD_ON" ]; then

echo "INFO, Scanning for Display Bridge"
found=`i2cdetect -y 9 | grep " $i2c_add "`
if [ -z "$found" ]; then
  echo "FAIL, Device 0x$i2c_add NOT found"
  echo CARRIER_LCD_DEVICE=FAIL >> Q_CARRIER_LCD.txt
  #exit 1
else
  echo "PASS, Device 0x$i2c_add found"
fi

#should not be needed when integrated into BIOS
echo "INFO, configuring eDP Bridge, please wait for LCD screen..."

#set eDP bridge to eDP 1920
#-- IO Voltage Setting --
i2cset -y 9 0x68 0x08 0x00 0x01 0x00 0x00 0x00 i
#-- Boot Settings -->
i2cset -y 9 0x68 0x10 0x00 0x78 0x69 0x00 0x00 i
i2cset -y 9 0x68 0x10 0x04 0x02 0x08 0x02 0x00 i
i2cset -y 9 0x68 0x10 0x08 0x23 0x00 0x87 0x02 i
i2cset -y 9 0x68 0x10 0x0C 0x19 0x04 0x00 0x23 i
i2cset -y 9 0x68 0x10 0x10 0x06 0x00 0x67 0x00 i
i2cset -y 9 0x68 0x10 0x14 0x01 0x00 0x00 0x00 i
#sleep ms="1" />
##sleep 1

i2cset -y 9 0x68 0x10 0x18 0xFF 0xFF 0xFF 0xFF i
#i2c_read addr="0x68" count="4" radix="16" />
#-- Check if 0x1018<bit2:0> is expected value -->
#-- If not wait until 0x1018<bit2:0> will be expected value -->

#-- Internal PCLK Setting for Non Preset or REFCLK=26MHz -->
i2cset -y 9 0x68 0xB0 0x05 0x0A i
i2cset -y 9 0x68 0xB0 0x06 0x03 i
i2cset -y 9 0x68 0xB0 0x07 0x16 i
i2cset -y 9 0x68 0xB0 0x08 0x00 i
i2cset -y 9 0x68 0xB0 0x09 0x21 i
i2cset -y 9 0x68 0xB0 0x0A 0x07 i
i2cset -y 9 0x68 0x10 0x14 0x03 0x00 0x00 0x00 i
#sleep ms="1" />
##sleep 1

i2cset -y 9 0x68 0x10 0x18 0xFF 0xFF 0xFF 0xFF i
#i2c_read addr="0x68" count="4" radix="16" />
#-- Check if 0x1018<bit2:0> is expected value -->
#-- If not wait until 0x1018<bit2:0> will be expected value -->

#-- Additional Setting for eDP -->
i2cset -y 9 0x68 0x80 0x03 0x41 i
i2cset -y 9 0x68 0xB4 0x00 0x0D i

#-- DPRX CAD Register Setting -->
i2cset -y 9 0x68 0xB8 0x8E 0xFF i
i2cset -y 9 0x68 0xB8 0x8F 0xFF i
i2cset -y 9 0x68 0xB8 0x9A 0xFF i
i2cset -y 9 0x68 0xB8 0x9B 0xFF i
i2cset -y 9 0x68 0xB8 0x00 0x0E i
i2cset -y 9 0x68 0xBB 0x26 0x02 i
i2cset -y 9 0x68 0xBB 0x01 0x20 i
i2cset -y 9 0x68 0xB8 0xC0 0xF1 i
i2cset -y 9 0x68 0xB8 0xC1 0xF1 i
i2cset -y 9 0x68 0xB8 0xC2 0xF0 i
i2cset -y 9 0x68 0xB8 0xC3 0xF0 i
i2cset -y 9 0x68 0xB8 0xC4 0xF0 i
i2cset -y 9 0x68 0xB8 0xC5 0xF0 i
i2cset -y 9 0x68 0xB8 0xC6 0xF0 i
i2cset -y 9 0x68 0xB8 0xC7 0xF0 i
i2cset -y 9 0x68 0xB8 0x0B 0x00 i
i2cset -y 9 0x68 0xB8 0x33 0x00 i
i2cset -y 9 0x68 0xB8 0x5B 0x00 i
i2cset -y 9 0x68 0xB8 0x10 0x00 i
i2cset -y 9 0x68 0xB8 0x38 0x00 i
i2cset -y 9 0x68 0xB8 0x60 0x00 i
i2cset -y 9 0x68 0xB8 0x15 0x00 i
i2cset -y 9 0x68 0xB8 0x3D 0x00 i
i2cset -y 9 0x68 0xB8 0x65 0x00 i
i2cset -y 9 0x68 0xB8 0x1A 0x00 i
i2cset -y 9 0x68 0xB8 0x42 0x00 i
i2cset -y 9 0x68 0xB8 0x6A 0x00 i
i2cset -y 9 0x68 0xB8 0x1F 0x00 i
i2cset -y 9 0x68 0xB8 0x47 0x00 i
i2cset -y 9 0x68 0xB8 0x6F 0x00 i
i2cset -y 9 0x68 0xB8 0x24 0x00 i
i2cset -y 9 0x68 0xB8 0x4C 0x00 i
i2cset -y 9 0x68 0xB8 0x74 0x00 i
i2cset -y 9 0x68 0xB8 0x29 0x00 i
i2cset -y 9 0x68 0xB8 0x51 0x00 i
i2cset -y 9 0x68 0xB8 0x79 0x00 i
i2cset -y 9 0x68 0xB8 0x2E 0x00 i
i2cset -y 9 0x68 0xB8 0x56 0x00 i
i2cset -y 9 0x68 0xB8 0x7E 0x00 i
i2cset -y 9 0x68 0xBB 0x90 0x10 i
i2cset -y 9 0x68 0xBB 0x91 0x0F i
i2cset -y 9 0x68 0xBB 0x92 0xF6 i
i2cset -y 9 0x68 0xBB 0x93 0x10 i
i2cset -y 9 0x68 0xBB 0x94 0x0F i
i2cset -y 9 0x68 0xBB 0x95 0xF6 i
i2cset -y 9 0x68 0xBB 0x96 0x10 i
i2cset -y 9 0x68 0xBB 0x97 0x0F i
i2cset -y 9 0x68 0xBB 0x98 0xF6 i
i2cset -y 9 0x68 0xBB 0x99 0x10 i
i2cset -y 9 0x68 0xBB 0x9A 0x0F i
i2cset -y 9 0x68 0xBB 0x9B 0xF6 i
i2cset -y 9 0x68 0xB8 0x8A 0x03 i
i2cset -y 9 0x68 0xB8 0x96 0x03 i
i2cset -y 9 0x68 0xBB 0xD1 0x07 i
i2cset -y 9 0x68 0xBB 0xB0 0x07 i
i2cset -y 9 0x68 0xB8 0x8B 0x04 i
i2cset -y 9 0x68 0xB8 0x8C 0x45 i
i2cset -y 9 0x68 0xB8 0x8D 0x05 i
i2cset -y 9 0x68 0xB8 0x97 0x04 i
i2cset -y 9 0x68 0xB8 0x98 0xE0 i
i2cset -y 9 0x68 0xB8 0x99 0x2E i
i2cset -y 9 0x68 0x80 0x0E 0x00 i
i2cset -y 9 0x68 0x10 0x14 0x07 0x00 0x00 0x00 i
#sleep ms="1" />
##sleep 1

i2cset -y 9 0x68 0x10 0x18 0xFF 0xFF 0xFF 0xFF i
#i2c_read addr="0x68" count="4" radix="16" />
#-- Check if 0x1018<bit2:0> is expected value -->
#-- If not wait until 0x1018<bit2:0> will be expected value -->

#-- Video Size Related Setting for Non Preset -->
i2cset -y 9 0x68 0x01 0x48 0xB0 0x04 0x00 0x00 i
i2cset -y 9 0x68 0x29 0x20 0x10 0x0E 0x0B 0x3E i

#-- eDP Settings for Link Training -->
i2cset -y 9 0x68 0xB6 0x31 0xFF i
##sleep 1
#i2cset -y 9 0x68 0xB6 31</i2c_write>
#i2c_read addr="0x68" count="1" radix="16" />
#-- Check if 0xB631<bit1:0>=01b. -->
#-- If not wait until 0xB631<bit1:0>=01b -->
i2cset -y 9 0x68 0x80 0x01 0x14 i
i2cset -y 9 0x68 0x80 0x02 0x02 i
i2cset -y 9 0x68 0xB6 0x08 0x0B i
i2cset -y 9 0x68 0xB8 0x00 0x1E i
i2cset -y 9 0x68 0x87 0x00 0x00 i
i2cset -y 9 0x68 0x50 0x10 0x00 0x00 0x9D 0x00 i
i2cset -y 9 0x68 0x00 0x8C 0x40 0x00 0x00 0x00 i
i2cset -y 9 0x68 0x00 0x80 0x02 0x00 0x00 0x00 i

#-- By detecting VSYNC monitor output (INT rising edge) -->
#-- After Link Training finishes -->
#-- Check Link Training Status -->
i2cset -y 9 0x68 0x82 0x02 0xFF i
##sleep 1
#i2cset -y 9 0x68 0x82 02</i2c_write>
#i2c_read addr="0x68" count="1" radix="16" />
#-- Check if 0x8202 is expected value. -->
#-- If not, Link Training has problem. -->
i2cset -y 9 0x68 0x82 0x03 0xFF i
##sleep 1
#-- Check if 0x8203 is expected value. -->
#-- If not, Link Training has problem. -->
i2cset -y 9 0x68 0x82 0x04 0xFF i
##sleep 1
#i2cset -y 9 0x68 0x82 04</i2c_write>
#i2c_read addr="0x68" count="1" radix="16" />
#-- Check if 0x8204 is expected value. -->
#-- If not, Link Training has problem. -->
i2cset -y 9 0x68 0x21 0x58 0x09 0x00 0x28 0x00 i
i2cset -y 9 0x68 0x21 0x60 0x07 0x00 0x0F 0x00 i
i2cset -y 9 0x68 0x21 0x64 0x28 0x23 0x00 0x00 i
i2cset -y 9 0x68 0x21 0x68 0x0E 0x00 0x00 0x00 i

#-- DSI Start -->
i2cset -y 9 0x68 0x20 0x7C 0x81 0x00 0x00 0x00 i
i2cset -y 9 0x68 0x20 0x50 0x00 0x00 0x00 0x00 i
i2cset -y 9 0x68 0x20 0x1C 0x01 0x00 0x00 0x00 i
#sleep ms="1" />
##sleep 1

i2cset -y 9 0x68 0x20 0x60 0xFF 0xFF 0xFF 0xFF i
##sleep 1
#i2cset -y 9 0x68 0x20 60</i2c_write>
#i2c_read addr="0x68" count="4" radix="16" />
#-- Check if 0x2060/4060<bit1:0>=11b. -->
#-- If not wait until 0x2060/4060<bit1:0>=11b. -->

#-- GPIO setting for LCD control.  (Depends on LCD specification and System configuration) -->
i2cset -y 9 0x68 0x08 0x04 0x00 0x00 0x00 0x00 i
i2cset -y 9 0x68 0x00 0x80 0x0F 0x00 0x00 0x00 i
i2cset -y 9 0x68 0x00 0x84 0x0F 0x00 0x00 0x00 i
i2cset -y 9 0x68 0x00 0x84 0x00 0x00 0x00 0x00 i
i2cset -y 9 0x68 0x00 0x84 0x0F 0x00 0x00 0x00 i
#sleep ms="50" />
##sleep 1

#-- DSI Hs Clock Mode -->
i2cset -y 9 0x68 0x20 0x50 0x20 0x00 0x00 0x00 i
#sleep ms="100" />
##sleep 1

#-- Command Transmission Before Video Start. (Depeds on LCD specification) -->
#-- LCD Initialization -->
i2cset -y 9 0x68 0x22 0xFC 0x15 0x01 0x00 0x81 i
#<sleep ms="20" />
##sleep 1

i2cset -y 9 0x68 0x22 0xFC 0x15 0x8C 0x80 0x81 i
i2cset -y 9 0x68 0x22 0xFC 0x15 0xC7 0x50 0x81 i
i2cset -y 9 0x68 0x22 0xFC 0x15 0xC5 0x50 0x81 i
i2cset -y 9 0x68 0x22 0xFC 0x15 0x85 0x04 0x81 i
i2cset -y 9 0x68 0x22 0xFC 0x15 0x86 0x08 0x81 i
i2cset -y 9 0x68 0x22 0xFC 0x15 0x83 0xAA 0x81 i
i2cset -y 9 0x68 0x22 0xFC 0x15 0x84 0x11 0x81 i
i2cset -y 9 0x68 0x22 0xFC 0x15 0x9C 0x10 0x81 i
i2cset -y 9 0x68 0x22 0xFC 0x15 0xA9 0x4B 0x81 i
i2cset -y 9 0x68 0x22 0xFC 0x05 0x11 0x00 0x81 i
#sleep ms="120" /> 
##sleep 1
i2cset -y 9 0x68 0x22 0xFC 0x05 0x29 0x00 0x81 i
i2cset -y 9 0x68 0x2A 0x10 0x10 0x00 0x04 0x80 i
i2cset -y 9 0x68 0x2A 0x04 0x01 0x00 0x00 0x00 i

#-- Check if eDP video is coming -->
i2cset -y 9 0x68 0x01 0x54 0x01 0x00 0x00 0x00 i

#restart eDP1
#xrandr -d :0.0 --output eDP1 --off
#xrandr -d :0.0 -s 640x480
#xrandr -d :0.0 -s 1200x1920
xrandr -d :0.0 --output eDP1 --auto
xrandr -d :0.0 --output eDP1 --rotate left

#stop screen going to sleep
/usr/bin/xset -d :0.0 -dpms
/usr/bin/xset -d :0.0 s off
/usr/bin/xset -d :0.0 s noblank

found=`xrandr -d :0.0 | grep "$video_status"`
if [ -z "$found" ]; then
  echo "FAIL, eDP output NOT found or incorrect resolution"
  echo CARRIER_LCD_ON=FAIL >> Q_CARRIER_LCD.txt
  #exit 1
else
  echo "PASS, $video_status"
  echo CARRIER_LCD_ON=PASS >> Q_CARRIER_LCD.txt
fi

#echo "INPT, Is LCD working? (y/n)..."
#read result

#if [ "$result" = "y" ]; then
  #echo "PASS, LCD working"
#else
  #echo "FAIL, LCD NOT working"
#fi
elif [ "$item" == "CARRIER_LCD_OFF" ]; then

#!/bin/sh

#backlight off
isaset -y -f 0x286 0xfb

#eDP1 off
xrandr -d :0.0 --output eDP1 --off

#reset DSI bridge
isaset -y -f 0x287 0x20
isaset -y -f 0x287 0x00
echo CARRIER_LCD_OFF=PASS >> Q_CARRIER_LCD.txt
else
usage
fi

